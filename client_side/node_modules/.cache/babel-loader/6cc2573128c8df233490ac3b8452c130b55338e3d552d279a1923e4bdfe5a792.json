{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n// import { useNavigate } from 'react-router-dom';\n\n// const History = () =>\n// {\n//     const Navigate = useNavigate();\n//     const [history, setHistory] = useState([]);\n//     const userId = localStorage.setItem('userId');\n//     console.log(userId);\n\n//     useEffect(() =>\n//     {\n//         const fetchTransactionHistory = async () =>\n//         {\n//             try\n//             {\n//                 // Fetch the user's transaction history from the backend API\n//                 const response = await fetch(`https://olaitan01.onrender.com/users/${userId}/history`, {\n//                     method: 'GET',\n//                     headers: {\n//                         Authorization: `Bearer ${localStorage.getItem('id', userId)}`,\n//                     },\n//                 });\n\n//                 if (!response.ok)\n//                 {\n//                     throw new Error('Error fetching transaction history');\n//                 }\n\n//                 const data = await response.json();\n// const result = data.transactions\n//                 // Check if data is an array\n//                 if (Array.isArray(result))\n//                 {\n//                     // Set the fetched transaction result to the state\n//                     setHistory(result);\n//                 } else\n//                 {\n//                     console.error('Invalid transaction data:', data);\n//                 }\n//             } catch (error)\n//             {\n//                 console.error('Error fetching transaction history:', error);\n//             }\n//         };\n\n//         fetchTransactionHistory();\n//     }, [userId]);\n\n//     return (\n//         <div>\n//             <h2>Transaction History</h2>\n//             <table>\n//                 <thead>\n//                     <tr>\n//                         <th>Date</th>\n//                         <th>Amount</th>\n//                         <th>Type</th>\n//                     </tr>\n//                 </thead>\n//                 <tbody>\n//                     {history.map((transaction) => (\n//                         <tr key={transaction._id}>\n//                             <td>{transaction.date}</td>\n//                             <td>{transaction.amount}</td>\n//                             <td>{transaction.type}</td>\n//                         </tr>\n//                     ))}\n//                 </tbody>\n//             </table>\n//             <div>\n//                 <button type=\"button\" onClick={() => Navigate('/dashboard')}>\n//                     Back to Dashboard\n//                 </button>\n//             </div>\n//         </div>\n//     );\n// };\n\n// export default History;","map":{"version":3,"names":[],"sources":["/Users/apple/Desktop/new-bank-app/client-side/src/pages/transaction-history/history.jsx"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import { useNavigate } from 'react-router-dom';\n\n// const History = () =>\n// {\n//     const Navigate = useNavigate();\n//     const [history, setHistory] = useState([]);\n//     const userId = localStorage.setItem('userId');\n//     console.log(userId);\n\n//     useEffect(() =>\n//     {\n//         const fetchTransactionHistory = async () =>\n//         {\n//             try\n//             {\n//                 // Fetch the user's transaction history from the backend API\n//                 const response = await fetch(`https://olaitan01.onrender.com/users/${userId}/history`, {\n//                     method: 'GET',\n//                     headers: {\n//                         Authorization: `Bearer ${localStorage.getItem('id', userId)}`,\n//                     },\n//                 });\n\n//                 if (!response.ok)\n//                 {\n//                     throw new Error('Error fetching transaction history');\n//                 }\n\n//                 const data = await response.json();\n// const result = data.transactions\n//                 // Check if data is an array\n//                 if (Array.isArray(result))\n//                 {\n//                     // Set the fetched transaction result to the state\n//                     setHistory(result);\n//                 } else\n//                 {\n//                     console.error('Invalid transaction data:', data);\n//                 }\n//             } catch (error)\n//             {\n//                 console.error('Error fetching transaction history:', error);\n//             }\n//         };\n\n//         fetchTransactionHistory();\n//     }, [userId]);\n\n//     return (\n//         <div>\n//             <h2>Transaction History</h2>\n//             <table>\n//                 <thead>\n//                     <tr>\n//                         <th>Date</th>\n//                         <th>Amount</th>\n//                         <th>Type</th>\n//                     </tr>\n//                 </thead>\n//                 <tbody>\n//                     {history.map((transaction) => (\n//                         <tr key={transaction._id}>\n//                             <td>{transaction.date}</td>\n//                             <td>{transaction.amount}</td>\n//                             <td>{transaction.type}</td>\n//                         </tr>\n//                     ))}\n//                 </tbody>\n//             </table>\n//             <div>\n//                 <button type=\"button\" onClick={() => Navigate('/dashboard')}>\n//                     Back to Dashboard\n//                 </button>\n//             </div>\n//         </div>\n//     );\n// };\n\n// export default History;\n"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}